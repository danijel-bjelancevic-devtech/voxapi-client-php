<?php
/*
 * APIv3SandboxLib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 03/02/2015
 */

class OrderModel {
    /**
     * The identifier of the order
     * @param int $orderId public property
     */
    protected $orderId;

    /**
     * The reference assigned to the order by Voxbone
     * @param string $reference public property
     */
    protected $reference;

    /**
     * The order creation date
     * @param string $dateAdded public property
     */
    protected $dateAdded;

    /**
     * The order cancellation date, if applicable
     * @param string $dateCanceled public property
     */
    protected $dateCanceled;

    /**
     * The current status of the order
     * @param string $status public property
     */
    protected $status;

    /**
	 * Constructor to set initial or default values of member properties
	 * @param   int $orderId    Initialization value for the property $this->orderId
	 * @param   string $reference    Initialization value for the property $this->reference
	 * @param   string $dateAdded    Initialization value for the property $this->dateAdded
	 * @param   string $dateCanceled    Initialization value for the property $this->dateCanceled
	 * @param   string $status    Initialization value for the property $this->status
	 */
    public function __construct()
    {
        if(5 == func_num_args())
        {
            $this->orderId = func_get_arg(0);
            $this->reference = func_get_arg(1);
            $this->dateAdded = func_get_arg(2);
            $this->dateCanceled = func_get_arg(3);
            $this->status = func_get_arg(4);
        }
    }

    /**
     * Return a property of the response if it exists.
     * Possibilities include: code, raw_body, headers, body (if the response is json-decodable)
     * @return mixed
     */
    public function __get($property)
    {
        if (property_exists($this, $property)) {
            //UTF-8 is recommended for correct JSON serialization
            $value = $this->$property;
            if (is_string($value) && mb_detect_encoding($value, "UTF-8", TRUE) != "UTF-8") {
                return utf8_encode($value);
            }
            else {
                return $value;
            }
        }
    }
    
    /**
     * Set the properties of this object
     * @param string $property the property name
     * @param mixed $value the property value
     */
    public function __set($property, $value)
    {
        if (property_exists($this, $property)) {
            //UTF-8 is recommended for correct JSON serialization
            if (is_string($value) && mb_detect_encoding($value, "UTF-8", TRUE) != "UTF-8") {
                $this->$property = utf8_encode($value);
            }
            else {
                $this->$property = $value;
            }
        }

        return $this;
    }

    /**
     * Encode this object to JSON
     */
    public function to_json()
    {
        $json = array();
        foreach($this as $key => $value) {
            $json[$key] = $value;
        }
        return $json;
    }
}