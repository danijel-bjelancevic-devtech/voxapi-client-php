<?php
/*
 * APIv3SandboxLib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 03/02/2015
 */

class DidGroupModel {
    /**
     * The didgroup identifier
     * @param int $didGroupId public property
     */
    protected $didGroupId;

    /**
     * The three letter identifier of the didgroup country
     * @param string $countryCodeA3 public property
     */
    protected $countryCodeA3;

    /**
     * The identifier of the didgroup state
     * @param int|null $stateId public property
     */
    protected $stateId;

    /**
     * The number type for the didgroup
     * @param string $didType public property
     */
    protected $didType;

    /**
     * The name of the didgroup city
     * @param string|null $cityName public property
     */
    protected $cityName;

    /**
     * The area code for the didgroup
     * @param int $areaCode public property
     */
    protected $areaCode;

    /**
     * The name of the ratecenter for the didgroup
     * @param string|null $rateCenter public property
     */
    protected $rateCenter;

    /**
     * The current available stock of the didgroup
     * @param int $stock public property
     */
    protected $stock;

    /**
     * The setup price in cents per number for the didgroup
     * @param int $setup100 public property
     */
    protected $setup100;

    /**
     * The monthly price in cents per number for the didgroup
     * @param int $monthly100 public property
     */
    protected $monthly100;

    /**
     * A flag indicating if there are available numbers in this didgroup
     * @param bool $available public property
     */
    protected $available;

    /**
     * The regulation requirements for the didgroup
     * @param RegulationRequirementModel|null $regulationRequirement public property
     */
    protected $regulationRequirement;

    /**
     * The list of features supported by the didgroup
     * @param array $features public property
     */
    protected $features;

    /**
	 * Constructor to set initial or default values of member properties
	 * @param   int $didGroupId    Initialization value for the property $this->didGroupId
	 * @param   string $countryCodeA3    Initialization value for the property $this->countryCodeA3
	 * @param   int|null $stateId    Initialization value for the property $this->stateId
	 * @param   string $didType    Initialization value for the property $this->didType
	 * @param   string|null $cityName    Initialization value for the property $this->cityName
	 * @param   int $areaCode    Initialization value for the property $this->areaCode
	 * @param   string|null $rateCenter    Initialization value for the property $this->rateCenter
	 * @param   int $stock    Initialization value for the property $this->stock
	 * @param   int $setup100    Initialization value for the property $this->setup100
	 * @param   int $monthly100    Initialization value for the property $this->monthly100
	 * @param   bool $available    Initialization value for the property $this->available
	 * @param   RegulationRequirementModel|null $regulationRequirement    Initialization value for the property $this->regulationRequirement
	 * @param   array $features    Initialization value for the property $this->features
	 */
    public function __construct()
    {
        if(13 == func_num_args())
        {
            $this->didGroupId = func_get_arg(0);
            $this->countryCodeA3 = func_get_arg(1);
            $this->stateId = func_get_arg(2);
            $this->didType = func_get_arg(3);
            $this->cityName = func_get_arg(4);
            $this->areaCode = func_get_arg(5);
            $this->rateCenter = func_get_arg(6);
            $this->stock = func_get_arg(7);
            $this->setup100 = func_get_arg(8);
            $this->monthly100 = func_get_arg(9);
            $this->available = func_get_arg(10);
            $this->regulationRequirement = func_get_arg(11);
            $this->features = func_get_arg(12);
        }
    }

    /**
     * Return a property of the response if it exists.
     * Possibilities include: code, raw_body, headers, body (if the response is json-decodable)
     * @return mixed
     */
    public function __get($property)
    {
        if (property_exists($this, $property)) {
            //UTF-8 is recommended for correct JSON serialization
            $value = $this->$property;
            if (is_string($value) && mb_detect_encoding($value, "UTF-8", TRUE) != "UTF-8") {
                return utf8_encode($value);
            }
            else {
                return $value;
            }
        }
    }
    
    /**
     * Set the properties of this object
     * @param string $property the property name
     * @param mixed $value the property value
     */
    public function __set($property, $value)
    {
        if (property_exists($this, $property)) {
            //UTF-8 is recommended for correct JSON serialization
            if (is_string($value) && mb_detect_encoding($value, "UTF-8", TRUE) != "UTF-8") {
                $this->$property = utf8_encode($value);
            }
            else {
                $this->$property = $value;
            }
        }

        return $this;
    }

    /**
     * Encode this object to JSON
     */
    public function to_json()
    {
        $json = array();
        foreach($this as $key => $value) {
            $json[$key] = $value;
        }
        return $json;
    }
}